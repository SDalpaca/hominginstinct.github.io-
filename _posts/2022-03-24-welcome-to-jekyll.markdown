---
layout: post
title:  "분할 정복에 관한 포스팅' 202101627 이준한"
date:   2022-03-24 15:12:54 +0900
categories: jekyll update
---
# 합병 정렬


# 합병 정렬(merge sort) 알고리즘의 개념 요약

· ‘존 폰 노이만(John von Neumann)’이라는 사람이 제안한 방법
· 일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬 에 속하며, 분할 정복 알고리즘의 하나이다.
            -분할 정복(divide and conquer) 방법
                  문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 결과를 모아서 원래의 문제를 해결하는 전략이다.
                  분할 정복 방법은 대개 순환 호출을 이용하여 구현한다.
· 과정 설명
    1. 리스트의 길이가 0 또는 1이면 이미 정렬된 것으로 본다. 그렇지 않은 경우에는
    2. 정렬되지 않은 리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.
    3. 각 부분 리스트를 재귀적으로 합병 정렬을 이용해 정렬한다.
    4. 두 부분 리스트를 다시 하나의 정렬된 리스트로 합병한다.




# 합병 정렬(merge sort) 알고리즘의 구체적인 개념

· 하나의 리스트를 두 개의 균등한 크기로 분할하고 분할된 부분 리스트를 정렬한 다음, 두 개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법이다.
· 합병 정렬은 다음의 단계들로 이루어진다.
          분할(Divide): 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.
          정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다.
          결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다.
· 합병 정렬의 과정
          추가적인 리스트가 필요하다.
          각 부분 배열을 정렬할 때도 합병 정렬을 순환적으로 호출하여 적용한다.
          합병 정렬에서 실제로 정렬이 이루어지는 시점은 2개의 리스트를 합병(merge)하는 단계이다.
 



# 합병 정렬(merge sort) 알고리즘의 예제

· 배열에 27, 10, 12, 20, 25, 13, 15, 22이 저장되어 있다고 가정하고 자료를 오름차순으로 정렬해 보자.
· 2개의 정렬된 리스트를 합병(merge)하는 과정
           1. 2개의 리스트의 값들을 처음부터 하나씩 비교하여 두 개의 리스트의 값 중에서 더 작은 값을 새로운 리스트(sorted)로 옮긴다.
           2. 둘 중에서 하나가 끝날 때까지 이 과정을 되풀이한다.
           3. 만약 둘 중에서 하나의 리스트가 먼저 끝나게 되면 나머지 리스트의 값들을 전부 새로운 리스트(sorted)로 복사한다.
           4. 새로운 리스트(sorted)를 원래의 리스트(list)로 옮긴다.



 
# 합병 정렬(merge sort) 알고리즘의 특징
        
       ·단점
           만약 레코드를 배열(Array)로 구성하면, 임시 배열이 필요하다.
           제자리 정렬(in-place sorting)이 아니다.
           레크드들의 크기가 큰 경우에는 이동 횟수가 많으므로 매우 큰 시간적 낭비를 초래한다.
      
        ·장점
          안정적인 정렬 방법
          데이터의 분포에 영향을 덜 받는다. 즉, 입력 데이터가 무엇이든 간에 정렬되는 시간은 동일하다. (O(nlog₂n)로 동일)
          만약 레코드를 연결 리스트(Linked List)로 구성하면, 링크 인덱스만 변경되므로 데이터의 이동은 무시할 수 있을 정도로 작아진다.
          제자리 정렬(in-place sorting)로 구현할 수 있다.
          따라서 크기가 큰 레코드를 정렬할 경우에 연결 리스트를 사용한다면, 합병 정렬은 퀵 정렬을 포함한 다른 어떤 졍렬 방법보다 효율적이다.
         



# 합병 정렬(merge sort)의 시간복잡도
      
시간복잡도를 계산한다면

-분할 단계
-비교 연산과 이동 연산이 수행되지 않는다.
-합병 단계
-비교 횟수
 

-순환 호출의 깊이 (합병 단계의 수)
레코드의 개수 n이 2의 거듭제곱이라고 가정(n=2^k)했을 때, n=2^3의 경우, 2^3 -> 2^2 -> 2^1 -> 2^0 순으로 줄어들어 순환 호출의 깊이가 3임을 알 수 있다. 이것을 일반화하면 n=2^k의 경우, k(k=log₂n)임을 알 수 있다.
k=log₂n
-각 합병 단계의 비교 연산
크기 1인 부분 배열 2개를 합병하는 데는 최대 2번의 비교 연산이 필요하고, 부분 배열의 쌍이 4개이므로 24=8번의 비교 연산이 필요하다. 다음 단계에서는 크기 2인 부분 배열 2개를 합병하는 데 최대 4번의 비교 연산이 필요하고, 부분 배열의 쌍이 2개이므로 42=8번의 비교 연산이 필요하다. 마지막 단계에서는 크기 4인 부분 배열 2개를 합병하는 데는 최대 8번의 비교 연산이 필요하고, 부분 배열의 쌍이 1개이므로 8*1=8번의 비교 연산이 필요하다. 이것을 일반화하면 하나의 합병 단계에서는 최대 n번의 비교 연산을 수행함을 알 수 있다.
최대 n번
순환 호출의 깊이 만큼의 합병 단계 * 각 합병 단계의 비교 연산 = nlog₂n
-이동 횟수
순환 호출의 깊이 (합병 단계의 수)
k=log₂n
각 합병 단계의 이동 연산
임시 배열에 복사했다가 다시 가져와야 되므로 이동 연산은 총 부분 배열에 들어 있는 요소의 개수가 n인 경우, 레코드의 이동이 2n번 발생한다.
순환 호출의 깊이 만큼의 합병 단계 * 각 합병 단계의 이동 연산 = 2nlog₂n
T(n) = nlog₂n(비교) + 2nlog₂n(이동) = 3nlog₂n = O(nlog₂n)


# 정렬 알고리즘 시간복잡도 비교
 

   ·단순(구현 간단)하지만 비효율적인 방법 - 삽입 정렬, 선택 정렬, 버블 정렬
   ·복잡하지만 효율적인 방법 - 퀵 정렬, 힙 정렬, 합병 정렬, 기수 정렬




# 퀵 정렬


# 퀵 정렬(quick sort) 알고리즘의 개념 요약

    ·‘찰스 앤터니 리처드 호어(Charles Antony Richard Hoare)’가 개발한 정렬 알고리즘
    ·퀵 정렬은 불안정 정렬 에 속하며, 다른 원소와의 비교만으로 정렬을 수행하는 비교 정렬 에 속한다.
    ·분할 정복 알고리즘의 하나로, 평균적으로 매우 빠른 수행 속도를 자랑하는 정렬 방법
    ·합병 정렬(merge sort)과 달리 퀵 정렬은 리스트를 비균등하게 분할한다.

    ·분할 정복(divide and conquer) 방법
        문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 결과를 모아서 원래의 문제를 해결하는 전략이다.
        분할 정복 방법은 대개 순환 호출을 이용하여 구현한다.
     ·과정 설명
        1. 리스트 안에 있는 한 요소를 선택한다. 이렇게 고른 원소를 피벗(pivot) 이라고 한다.
        2. 피벗을 기준으로 피벗보다 작은 요소들은 모두 피벗의 왼쪽으로 옮겨지고 피벗보다 큰 요소들은 모두 피벗의 오른쪽으로 옮겨진다. (피벗을 중심으로 왼쪽: 피벗보다 작은 요소들, 오른쪽: 피벗보다 큰 요소들)
        3. 피벗을 제외한 왼쪽 리스트와 오른쪽 리스트를 다시 정렬한다.
            분할된 부분 리스트에 대하여 순환 호출 을 이용하여 정렬을 반복한다.
                부분 리스트에서도 다시 피벗을 정하고 피벗을 기준으로 2개의 부분 리스트로 나누는 과정을 반복한다.
        4. 부분 리스트들이 더 이상 분할이 불가능할 때까지 반복한다.
                리스트의 크기가 0이나 1이 될 때까지 반복한다.
 



# 퀵 정렬(quick sort) 알고리즘의 구체적인 개념

 · 하나의 리스트를 피벗(pivot)을 기준으로 두 개의 비균등한 크기로 분할하고 분할된 부분 리스트를 정렬한 다음, 두 개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법이다.
 · 퀵 정렬은 다음의 단계들로 이루어진다.
        분할(Divide): 입력 배열을 피벗을 기준으로 비균등하게 2개의 부분 배열(피벗을 중심으로 왼쪽: 피벗보다 작은 요소들, 오른쪽: 피벗보다 큰 요소들)로 분할한다.
        정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다.
        결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다.
        순환 호출이 한번 진행될 때마다 최소한 하나의 원소(피벗)는 최종적으로 위치가 정해지므로, 이 알고리즘은 반드시 끝난다는 것을 보장할 수 있다.
 




# 퀵 정렬(quick sort) 알고리즘의 예제

 · 배열에 5, 3, 8, 4, 9, 1, 6, 2, 7이 저장되어 있다고 가정하고 자료를 오름차순으로 정렬해 보자.
 · 퀵 정렬에서 피벗을 기준으로 두 개의 리스트로 나누는 과정(c언어 코드의 partition 함수의 내용)
 · 피벗 값을 입력 리스트의 첫 번째 데이터로 하자. (다른 임의의 값이어도 상관없다.)
 · 2개의 인덱스 변수(low, high)를 이용해서 리스트를 두 개의 부분 리스트로 나눈다.
 · 1회전: 피벗이 5인 경우,
         1. low는 왼쪽에서 오른쪽으로 탐색해가다가 피벗보다 큰 데이터(8)을 찾으면 멈춘다.
         2. high는 오른쪽에서 왼쪽으로 탐색해가다가 피벗보다 작은 데이터(2)를 찾으면 멈춘다.
         3. low와 high가 가리키는 두 데이터를 서로 교환한다.
         4. 이 탐색-교환 과정은 low와 high가 엇갈릴 때까지 반복한다.
·2회전: 피벗(1회전의 왼쪽 부분리스트의 첫 번째 데이터)이 1인 경우,
             위와 동일한 방법으로 반복한다.
 ·3회전: 피벗(1회전의 오른쪽 부분리스트의 첫 번째 데이터)이 9인 경우,
             위와 동일한 방법으로 반복한다.




# 퀵 정렬(quick sort) 알고리즘의 특징

 ·장점
     속도가 빠르다.
            시간 복잡도가 O(nlog₂n)를 가지는 다른 정렬 알고리즘과 비교했을 때도 가장 빠르다.
     추가 메모리 공간을 필요로 하지 않는다.
            퀵 정렬은 O(log n)만큼의 메모리를 필요로 한다.
 ·단점
     정렬된 리스트에 대해서는 퀵 정렬의 불균형 분할에 의해 오히려 수행시간이 더 많이 걸린다.


퀵 정렬의 불균형 분할을 방지하기 위하여 피벗을 선택할 때 더욱 리스트를 균등하게 분할할 수 있는 데이터를 선택한다.
EX) 리스트 내의 몇 개의 데이터 중에서 크기순으로 중간 값(medium)을 피벗으로 선택한다.





# 퀵 정렬(quick sort)의 시간복잡도

· 최선의 경우
     
     비교 횟수        
        순환 호출의 깊이
             레코드의 개수 n이 2의 거듭제곱이라고 가정(n=2^k)했을 때, n=2^3의 경우, 2^3 -> 2^2 -> 2^1 -> 2^0 순으로 줄어들어 순환 호출의 깊이가 3임을 알 수 있다. 이것을 일반화하면 n=2^k의 경우, k(k=log₂n)임을 알 수 있다.
             k=log₂n
        각 순환 호출 단계의 비교 연산
            각 순환 호출에서는 전체 리스트의 대부분의 레코드를 비교해야 하므로 평균 n번 정도의 비교가 이루어진다.
            평균 n번
        순환 호출의 깊이 * 각 순환 호출 단계의 비교 연산 = nlog₂n
 
    이동 횟수
          비교 횟수보다 적으므로 무시할 수 있다.
    최선의 경우 T(n) = O(nlog₂n)
 
·최악의 경우
      리스트가 계속 불균형하게 나누어지는 경우 (특히, 이미 정렬된 리스트에 대하여 퀵 정렬을 실행하는 경우)
 
      비교 횟수
          순환 호출의 깊이
                레코드의 개수 n이 2의 거듭제곱이라고 가정(n=2^k)했을 때, 순환 호출의 깊이는 n임을 알 수 있다.
                 n
          각 순환 호출 단계의 비교 연산
                 각 순환 호출에서는 전체 리스트의 대부분의 레코드를 비교해야 하므로 평균 n번 정도의 비교가 이루어진다.
                 평균 n번
         순환 호출의 깊이 * 각 순환 호출 단계의 비교 연산 = n^2
      이동 횟수
         비교 횟수보다 적으므로 무시할 수 있다.
      최악의 경우 T(n) = O(n^2)
 ·평균
      평균 T(n) = O(nlog₂n)
      시간 복잡도가 O(nlog₂n)를 가지는 다른 정렬 알고리즘과 비교했을 때도 가장 빠르다.
      퀵 정렬이 불필요한 데이터의 이동을 줄이고 먼 거리의 데이터를 교환할 뿐만 아니라, 한 번 결정된 피벗들이 추후 연산에서 제외되는 특성 때문이다.

